/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package com.test.gae.dao.gae;


import java.sql.Date;
import java.sql.Timestamp;

import java.util.ArrayList;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;


import com.spoledge.audao.db.dao.gae.GaeAbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import com.test.gae.dao.SecurityQnADao;
import com.test.gae.dto.SecurityQnA;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class SecurityQnADaoImpl extends GaeAbstractDaoImpl<SecurityQnA> implements SecurityQnADao {

    private static final String TABLE_NAME = "SecurityQnA";

    public SecurityQnADaoImpl( DatastoreService ds ) {
        super( ds );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public SecurityQnA findByPrimaryKey( long id ) {
        Entity _ent = entityGet( new KeyFactory.Builder( "SecurityQnA", id ).getKey());

        return _ent != null ? fetch( null, _ent ) : null;
    }

    /**
     * Finds a record.
     */
    public SecurityQnA findByQuestion( String question ) {
        Query _query = getQuery();
        _query.addFilter( "question", Query.FilterOperator.EQUAL, question );

        return findOne( _query, "question = :1", 0, question);
    }

    /**
     * Finds records ordered by question.
     */
    public SecurityQnA[] findAll( ) {
        Query _query = getQuery();

        multipleQueries = false;
        String _cond = "1 = 1";

        return findManyArray( _query, _cond, 0, -1 );
    }

    /**
     * Deletes a record identified by its primary key.
     * @return true iff the record was really deleted (existed)
     */
    public boolean deleteByPrimaryKey( long id ) throws DaoException {
        return entityDelete( new KeyFactory.Builder( "SecurityQnA", id ).getKey() );
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - id
     */
    public long insert( SecurityQnA dto ) throws DaoException {
        Entity _ent = new Entity( "SecurityQnA");

        {
            if ( dto.getUsername() == null ) {
                throw new DaoException("Value of column 'username' cannot be null");
            }
            checkMaxLength( "username", dto.getUsername(), 30 );
            _ent.setProperty( "username", dto.getUsername());

            if ( dto.getPassword() == null ) {
                throw new DaoException("Value of column 'password' cannot be null");
            }
            checkMaxLength( "password", dto.getPassword(), 30 );
            _ent.setProperty( "password", dto.getPassword());

            if ( dto.getQuestion() == null ) {
                throw new DaoException("Value of column 'question' cannot be null");
            }
            checkMaxLength( "question", dto.getQuestion(), 500 );
            _ent.setProperty( "question", dto.getQuestion());

            if ( dto.getAnswer() == null ) {
                throw new DaoException("Value of column 'answer' cannot be null");
            }
            checkMaxLength( "answer", dto.getAnswer(), 500 );
            _ent.setProperty( "answer", dto.getAnswer());
        }

        entityPut( _ent, dto, "insert" );

        dto.setId( _ent.getKey().getId());

        return dto.getId();
    }

    /**
     * Updates one record found by primary key.
     * @return true iff the record was really updated (=found and any change was really saved)
     */
    public boolean update( long id, SecurityQnA dto ) throws DaoException {
        Entity _ent = entityGet( new KeyFactory.Builder( "SecurityQnA", id ).getKey());
        if (_ent == null) return false;

        boolean isUpdated = false;

        if ( dto.getId() != null ) {
            isUpdated = true;
        }

        if ( dto.getUsername() != null ) {
            checkMaxLength( "username", dto.getUsername(), 30 );
            _ent.setProperty( "username", dto.getUsername());
            isUpdated = true;
        }

        if ( dto.getPassword() != null ) {
            checkMaxLength( "password", dto.getPassword(), 30 );
            _ent.setProperty( "password", dto.getPassword());
            isUpdated = true;
        }

        if ( dto.getQuestion() != null ) {
            checkMaxLength( "question", dto.getQuestion(), 500 );
            _ent.setProperty( "question", dto.getQuestion());
            isUpdated = true;
        }

        if ( dto.getAnswer() != null ) {
            checkMaxLength( "answer", dto.getAnswer(), 500 );
            _ent.setProperty( "answer", dto.getAnswer());
            isUpdated = true;
        }

        if (!isUpdated) {
            return false;
        }

        entityPut( _ent, dto, "update" );

        return true;
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected SecurityQnA fetch( SecurityQnA dto, Entity ent ) {
        if ( dto == null ) dto = new SecurityQnA();

        dto.setId( ent.getKey().getId());
        dto.setUsername( getString( ent, "username" ));
        dto.setPassword( getString( ent, "password" ));
        dto.setQuestion( getString( ent, "question" ));
        dto.setAnswer( getString( ent, "answer" ));

        return dto;
    }

    protected SecurityQnA[] toArray(ArrayList<SecurityQnA> list ) {
        SecurityQnA[] ret = new SecurityQnA[ list.size() ];
        return list.toArray( ret );
    }

}
