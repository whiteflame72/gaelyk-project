/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package com.test.mysql.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import com.test.mysql.dao.UserSecurityQuestionDao;
import com.test.mysql.dto.UserSecurityQuestion;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class UserSecurityQuestionDaoImpl extends AbstractDaoImpl<UserSecurityQuestion> implements UserSecurityQuestionDao {

    private static final String TABLE_NAME = "User_Security_Questions";

    protected static final String SELECT_COLUMNS = "ua_name, question1, answer1, question2, answer2, question3, answer3, date_modified, attempted_count";

    protected static final String PK_CONDITION = "ua_name=?";

    private static final String SQL_INSERT = "INSERT INTO User_Security_Questions (ua_name,question1,answer1,question2,answer2,question3,answer3,date_modified,attempted_count) VALUES (?,?,?,?,?,?,?,?,?)";

    public UserSecurityQuestionDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public UserSecurityQuestion findByPrimaryKey( String uaName ) {
        return findOne( PK_CONDITION, uaName);
    }

    /**
     * Finds a record.
     */
    public UserSecurityQuestion findByUaName( String uaName ) {
        return findOne( "ua_name=?", uaName);
    }

    /**
     * Finds records ordered by ua_name.
     */
    public UserSecurityQuestion[] findAll( ) {
        return findManyArray( "1=1 ORDER BY ua_name", 0, -1);
    }

    /**
     * Deletes a record identified by its primary key.
     * @return true iff the record was really deleted (existed)
     */
    public boolean deleteByPrimaryKey( String uaName ) throws DaoException {
        return deleteOne( PK_CONDITION, uaName);
    }

    /**
     * Inserts a new record.
     */
    public void insert( UserSecurityQuestion dto ) throws DaoException {
        PreparedStatement stmt = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT );

            if ( dto.getUaName() == null ) {
                throw new DaoException("Value of column 'ua_name' cannot be null");
            }
            checkMaxLength( "ua_name", dto.getUaName(), 30 );
            stmt.setString( 1, dto.getUaName() );

            if ( dto.getQuestion1() == null ) {
                throw new DaoException("Value of column 'question1' cannot be null");
            }
            checkMaxLength( "question1", dto.getQuestion1(), 500 );
            stmt.setString( 2, dto.getQuestion1() );

            if ( dto.getAnswer1() == null ) {
                throw new DaoException("Value of column 'answer1' cannot be null");
            }
            checkMaxLength( "answer1", dto.getAnswer1(), 500 );
            stmt.setString( 3, dto.getAnswer1() );

            if ( dto.getQuestion2() == null ) {
                throw new DaoException("Value of column 'question2' cannot be null");
            }
            checkMaxLength( "question2", dto.getQuestion2(), 500 );
            stmt.setString( 4, dto.getQuestion2() );

            if ( dto.getAnswer2() == null ) {
                throw new DaoException("Value of column 'answer2' cannot be null");
            }
            checkMaxLength( "answer2", dto.getAnswer2(), 500 );
            stmt.setString( 5, dto.getAnswer2() );

            if ( dto.getQuestion3() == null ) {
                throw new DaoException("Value of column 'question3' cannot be null");
            }
            checkMaxLength( "question3", dto.getQuestion3(), 500 );
            stmt.setString( 6, dto.getQuestion3() );

            if ( dto.getAnswer3() == null ) {
                throw new DaoException("Value of column 'answer3' cannot be null");
            }
            checkMaxLength( "answer3", dto.getAnswer3(), 500 );
            stmt.setString( 7, dto.getAnswer3() );

            if ( dto.getDateModified() == null ) {
                dto.setDateModified( new Date( System.currentTimeMillis()));
            }
            stmt.setDate( 8, dto.getDateModified() );

            if ( dto.getAttemptedCount() == null ) {
                stmt.setNull( 9, Types.BIGINT );
            }
            else {
                stmt.setLong( 9, dto.getAttemptedCount() );
            }

            int n = stmt.executeUpdate();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Updates one record found by primary key.
     * @return true iff the record was really updated (=found and any change was really saved)
     */
    public boolean update( String uaName, UserSecurityQuestion dto ) throws DaoException {
        StringBuffer sb = new StringBuffer();
        ArrayList<Object> params = new ArrayList<Object>();

        if ( dto.getUaName() != null ) {
            checkMaxLength( "ua_name", dto.getUaName(), 30 );
            sb.append( "ua_name=?" );
            params.add( dto.getUaName());
        }

        if ( dto.getQuestion1() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "question1", dto.getQuestion1(), 500 );
            sb.append( "question1=?" );
            params.add( dto.getQuestion1());
        }

        if ( dto.getAnswer1() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "answer1", dto.getAnswer1(), 500 );
            sb.append( "answer1=?" );
            params.add( dto.getAnswer1());
        }

        if ( dto.getQuestion2() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "question2", dto.getQuestion2(), 500 );
            sb.append( "question2=?" );
            params.add( dto.getQuestion2());
        }

        if ( dto.getAnswer2() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "answer2", dto.getAnswer2(), 500 );
            sb.append( "answer2=?" );
            params.add( dto.getAnswer2());
        }

        if ( dto.getQuestion3() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "question3", dto.getQuestion3(), 500 );
            sb.append( "question3=?" );
            params.add( dto.getQuestion3());
        }

        if ( dto.getAnswer3() != null ) {
            if (sb.length() > 0) {
                sb.append( ", " );
            }

            checkMaxLength( "answer3", dto.getAnswer3(), 500 );
            sb.append( "answer3=?" );
            params.add( dto.getAnswer3());
        }

        if (sb.length() > 0) {
            sb.append( ", " );
        }
        
        if ( dto.getAttemptedCount() == null ) {
            sb.append( "attempted_count=NULL" );
        }
        else {
            sb.append( "attempted_count=?" );
            params.add( dto.getAttemptedCount());
        }
        
        if (sb.length() == 0) {
            return false;
        }

        params.add( uaName );

        Object[] oparams = new Object[ params.size() ];

        return updateOne( sb.toString(), PK_CONDITION, params.toArray( oparams ));
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected UserSecurityQuestion fetch( ResultSet rs ) throws SQLException {
        UserSecurityQuestion dto = new UserSecurityQuestion();
        dto.setUaName( rs.getString( 1 ));
        dto.setQuestion1( rs.getString( 2 ));
        dto.setAnswer1( rs.getString( 3 ));
        dto.setQuestion2( rs.getString( 4 ));
        dto.setAnswer2( rs.getString( 5 ));
        dto.setQuestion3( rs.getString( 6 ));
        dto.setAnswer3( rs.getString( 7 ));
        dto.setDateModified( rs.getDate( 8 ));
        dto.setAttemptedCount( rs.getLong( 9 ));

        if ( rs.wasNull()) {
            dto.setAttemptedCount( null );
        }


        return dto;
    }

    protected UserSecurityQuestion[] toArray(ArrayList<UserSecurityQuestion> list ) {
        UserSecurityQuestion[] ret = new UserSecurityQuestion[ list.size() ];
        return list.toArray( ret );
    }

}
