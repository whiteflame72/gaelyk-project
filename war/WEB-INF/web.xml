<?xml version="1.0" encoding="UTF-8" standalone="no"?><web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fmt="http://java.sun.com/jsp/jstl/fmt" version="2.5">
    <servlet>
        <servlet-name>GroovletServlet</servlet-name>
        <servlet-class>groovyx.gaelyk.GaelykServlet</servlet-class>
        <init-param>
           <param-name>verbose</param-name>
            <!-- Set it to true for more details -->
           <param-value>false</param-value>
       </init-param>
    </servlet>
    <servlet>
        <servlet-name>TemplateServlet</servlet-name>
        <servlet-class>groovyx.gaelyk.GaelykTemplateServlet</servlet-class>
        <init-param>
            <!-- Remove the default "generated by" messages from the templates -->
           <param-name>generated.by</param-name>
           <param-value>false</param-value>
       </init-param>
       <init-param>
           <param-name>verbose</param-name>
           <!-- Output generation time in the HTML, see source page -->
           <param-value>false</param-value>
       </init-param>
    </servlet>
     <filter>
    <filter-name>RoutesFilter</filter-name>
        <filter-class>groovyx.gaelyk.routes.RoutesFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>RoutesFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- Uncomment the following servlet definition if you want to receive XMPP messages-->
    <!--
    <servlet>
        <servlet-name>XmppServlet</servlet-name>
        <servlet-class>groovyx.gaelyk.GaelykXmppServlet</servlet-class>
    </servlet>
    -->
    <!-- Uncomment the following servlet definition if you want to receive incoming email messages-->
    <!--
    <servlet>
        <servlet-name>IncomingEmailServlet</servlet-name>
        <servlet-class>groovyx.gaelyk.GaelykIncomingEmailServlet</servlet-class>
    </servlet>
    -->
    <!-- Uncomment this servlet filter if you want to enable URL routing -->
    <!--
    <filter>
        <filter-name>RoutesFilter</filter-name>
        <filter-class>groovyx.gaelyk.routes.RoutesFilter</filter-class>
    </filter>
    -->

    <servlet-mapping>
        <servlet-name>GroovletServlet</servlet-name>
        <url-pattern>*.groovy</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>TemplateServlet</servlet-name>
        <url-pattern>*.gtpl</url-pattern>
    </servlet-mapping>
    <!-- Uncomment the following servlet mapping if you want to receive XMPP messages-->
    <!--
    <servlet-mapping>
        <servlet-name>XmppServlet</servlet-name>
        <url-pattern>/_ah/xmpp/message/chat/</url-pattern>
    </servlet-mapping>
    -->
    <!-- Uncomment the following servlet mapping if you want to receive incoming email messages-->
    <!--
    <servlet-mapping>
        <servlet-name>IncomingEmailServlet</servlet-name>
        <url-pattern>/_ah/mail/*</url-pattern>
    </servlet-mapping>
    -->
    
<!-- http://blog.notdot.net/2010/04/Using-the-new-bulkloader -->
  <!-- Add this to your web.xml to enable remote API on Java. -->
  <servlet>
    <servlet-name>remoteapi</servlet-name>
    <servlet-class>com.google.apphosting.utils.remoteapi.RemoteApiServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>remoteapi</servlet-name>
    <url-pattern>/remote_api</url-pattern>
  </servlet-mapping>
    

    <!-- Uncomment the following filter mapping if you want to enable URL routing -->
    <!--
    <filter-mapping>
        <filter-name>RoutesFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    -->


<!-- begin of caDSR -->
  <servlet>
     <servlet-name>
         MainServlet
     </servlet-name>
     <servlet-class>
         gov.nih.nci.cadsr.cadsrpasswordchange.core.MainServlet
     </servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/login</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/changePassword</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/saveQuestions</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/logout</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/promptUserID</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/promptUserQuestions</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/promptQuestion1</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/promptQuestion2</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/promptQuestion3</url-pattern>
  </servlet-mapping>
<!--
  -->
   <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/validateQuestion1</url-pattern>
  </servlet-mapping>
   <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/validateQuestion2</url-pattern>
  </servlet-mapping>
      <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/validateQuestion3</url-pattern>
  </servlet-mapping>
   <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/resetPassword</url-pattern>
  </servlet-mapping>
  <servlet-mapping>     
     <servlet-name>MainServlet</servlet-name>
     <url-pattern>/cadsrpasswordchange/setupPassword</url-pattern>
  </servlet-mapping>
  
  <session-config>
    <session-timeout>45</session-timeout>
  </session-config>

  <welcome-file-list>
    <welcome-file>jsp/login.jsp</welcome-file>
  </welcome-file-list>

  <!-- Application Tag Library Descriptor -->

  <taglib>
    <taglib-uri>/tags</taglib-uri>
    <taglib-location>/WEB-INF/tld/cadsrpasswordchange.tld</taglib-location>
  </taglib>


  	<!--  CSRF library configuration  -->
	<context-param>
		<param-name>Owasp.CsrfGuard.Config</param-name>
		<param-value>WEB-INF/Owasp.CsrfGuard.properties</param-value>
	</context-param>
	
	<context-param>
		<param-name>Owasp.CsrfGuard.Config.Print</param-name>
		<param-value>true</param-value>
	</context-param>
<!--	
	<listener>
		<listener-class>org.owasp.csrfguard.CsrfGuardListener</listener-class>
	</listener>
-->
	<listener>
		<listener-class>org.owasp.csrfguard.CsrfGuardHttpSessionListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.owasp.csrfguard.CsrfGuardServletContextListener</listener-class>
	</listener>

	<filter>
		<filter-name>CSRFGuard</filter-name>
		<filter-class>org.owasp.csrfguard.CsrfGuardFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>CSRFGuard</filter-name> 
		<url-pattern>/cadsrpasswordchange/*</url-pattern>
	</filter-mapping>
<!-- end of caDSR -->

    <!-- Uncomment the following security constraint if you want to secure your incoming email endpoint -->
    <!-- Only allow the SDK and administrators to have access to the incoming email endpoint -->
    <!--
    <security-constraint>
        <web-resource-collection>
            <url-pattern>/_ah/mail/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>admin</role-name>
        </auth-constraint>
    </security-constraint>
    -->
	<!-- reference: http://code.google.com/appengine/docs/java/config/webxml.html#Secure_URLs -->
	<security-constraint>
        <web-resource-collection>
            <url-pattern>/musers</url-pattern>
            <url-pattern>/users/*</url-pattern>
            <url-pattern>/createUsers.groovy</url-pattern>
      	</web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
        <auth-constraint>
            <role-name>admin</role-name>
        </auth-constraint>
    </security-constraint>

    <welcome-file-list> 
        <welcome-file>index.gtpl</welcome-file> 
    </welcome-file-list>
    
    <filter>
        <filter-name>ShiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
    </filter>

    <!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
    <!-- requests.  Usually this filter mapping is defined first (before all others) to -->
    <!-- ensure that Shiro works in subsequent filters in the filter chain:             -->
    <filter-mapping>
        <filter-name>ShiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>  
		<dispatcher>ERROR</dispatcher>  
		<dispatcher>FORWARD</dispatcher>  
		<dispatcher>INCLUDE</dispatcher>  
    </filter-mapping>
    
 <servlet>
  <servlet-name>SystemServiceServlet</servlet-name>
  <servlet-class>com.google.api.server.spi.SystemServiceServlet</servlet-class>
  <init-param>
   <param-name>services</param-name>
   <param-value/>
  </init-param>
 </servlet>
 <servlet-mapping>
  <servlet-name>SystemServiceServlet</servlet-name>
  <url-pattern>/_ah/spi/*</url-pattern>
 </servlet-mapping>
</web-app>